"use strict";

var strConsonantLettersNormal = 'qwrtpsdfghjklzxcvbnm';
var strConsonantLettersUpper = strConsonantLettersNormal.toUpperCase();
var strVowelsLettersNormal = 'eyuioa';
var strVowelsLettersUpper = strVowelsLettersNormal.toUpperCase();
var strNumbers = '0123456789';
var strSymbols = '!@#$%^&*()_+-={}[]:;|?<>/"\'~';
var defaultGenerateRecursion = 1;

var strConsonantLettersNormalArray = strConsonantLettersNormal.split('');
var strConsonantLettersUpperArray = strConsonantLettersUpper.split('');
var strVowelsLettersNormalArray = strVowelsLettersNormal.split('');
var strVowelsLettersUpperArray = strVowelsLettersUpper.split('');
var strNumbersArray = strNumbers.split('');
var strSymbolsArray = strSymbols.split('');

/*
 * Возвращает случайное число в диапазоне min-max (служебный метод)
 * @private
 * @param {Number} min Минимальное значение
 * @param {Number} max Максимальное значение
 * @returns {Number} Случайное число
 */
function _getRandom(min, max) 
{
    var range = max - min + 1;
    return Math.floor(Math.random() * range) + min;
}

/*
 * Возвращает случайный элемент из массива arrayVariants (служебный метод)
 * @private
 * @param {Array} arrayVariants Массив элементов из которых будет выбран случайный
 * @returns {*} Значение выбранного элемента из массива arrayVariants
*/
function _getRandomOfVariants(arrayVariants) 
{
    arrayVariants = arrayVariants ? arrayVariants : [];
    return arrayVariants.length > 0 ? arrayVariants[_getRandom(0, arrayVariants.length - 1)] : null;
}


/*
 * Генерирует и возвращает пароль
 * @param {Number} lettersNormalCount Количество строчных букв
 * @param {Number} lettersUpperCount Количество прописных букв
 * @param {Number} numbersCount Количество цифр
 * @param {Number} symbolsCount Количество символов
 * @param {Number} numbersLeftEnable Возможность нахождения цифр слева от всех букв
 * @param {Number} numbersInsideEnable Возможность нахождения цифр между букв
 * @param {Number} numbersRightEnable Возможность нахождения цифр справа от всех букв
 * @param {Number} symbolsLeftEnable Возможность нахождения символов слева от всех букв
 * @param {Number} symbolsInsideEnable Возможность нахождения символов между букв
 * @param {Number} symbolsRightEnable Возможность нахождения символов справа от всех букв
 * @returns {String} Сгенерированный пароль
 */ 
function getPassword(lettersNormalCount, lettersUpperCount, numbersCount, symbolsCount,
    numbersLeftEnable, numbersInsideEnable, numbersRightEnable, symbolsLeftEnable, symbolsInsideEnable, symbolsRightEnable) 
{
	var lettersCount = lettersNormalCount + lettersUpperCount;

	if(lettersCount < 2)
	{
		numbersInsideEnable = false;
		symbolsInsideEnable = false;
	}

    var totalLength = lettersCount + numbersCount + symbolsCount;

    var password = '';

    var passwordContainsLetter = false;

    var previousLettersType = (Math.random() > 0.499) ? 'consonant' : 'vowels';

    for (var i = 0; i < totalLength; i++) 
    {
    	var arrayVariantsNextChar = [];
    	lettersCount = lettersNormalCount + lettersUpperCount;
    	if(passwordContainsLetter)
    	{
    		if(lettersCount == 1)
    		{
    			var numbersInsideChance = (numbersRightEnable) ? 0.5 : 1;
    			if (numbersInsideEnable && numbersCount > 0 && ((!numbersRightEnable) || (Math.random() < numbersInsideChance)))
				{
        	    	arrayVariantsNextChar.push('number');
        		}
        		else 
        		{
        			var symbolsInsideChance = (symbolsRightEnable) ? 0.5 : 1;
       		 		if (symbolsInsideEnable && symbolsCount > 0 && ((!symbolsRightEnable) || (Math.random() < symbolsInsideChance)))
					{
						arrayVariantsNextChar.push('symbol');
        			}
        			else
        			{
        				if(lettersNormalCount > 0)
        				{
        					if(previousLettersType == 'consonant')
        					{
        						arrayVariantsNextChar.push('vowelsNormalLetter');
        					}
        					else
        					{
        						arrayVariantsNextChar.push('consonantNormalLetter');
        					}
        				}
        				if(lettersUpperCount > 0)
        				{
        					if(previousLettersType == 'consonant')
        					{
        						arrayVariantsNextChar.push('vowelsUpperLetter');
        					}
        					else
        					{
        						arrayVariantsNextChar.push('consonantUpperLetter');
        					}
        				}
        			}
        		}
        	}
        	else
        	{
        		if(lettersCount > 1)
        		{
        			if(numbersInsideEnable && numbersCount > 0)
        			{
        				arrayVariantsNextChar.push('number');
        			}
        			if(symbolsInsideEnable && symbolsCount > 0)
        			{
        				arrayVariantsNextChar.push('symbol');
        			}
        			if(lettersNormalCount > 0)
        			{
        				if(previousLettersType == 'consonant')
        				{
        					arrayVariantsNextChar.push('vowelsNormalLetter');
        				}
        				else
        				{
        					arrayVariantsNextChar.push('consonantNormalLetter');
        				}
        			}
        			if(lettersUpperCount > 0)
        			{
        				if(previousLettersType == 'consonant')
        				{
        					arrayVariantsNextChar.push('vowelsUpperLetter');
        				}
        				else
        				{
        					arrayVariantsNextChar.push('consonantUpperLetter');
        				}
        			}
        		}
        		else
        		{
        			if(numbersCount > 0)
        			{
        				arrayVariantsNextChar.push('number');
        			}
        			if(symbolsCount > 0)
        			{
        				arrayVariantsNextChar.push('symbol');
        			}
        		}
        	}
    	}
    	else
    	{
    		var numbersLeftChance = (numbersInsideEnable) ? (numbersRightEnable) ? 0.333 : 0.5 : 1;
    		if (numbersLeftEnable && numbersCount > 0 && ((!numbersInsideEnable && !numbersRightEnable) || (Math.random() < numbersLeftChance)))
			{
        	    arrayVariantsNextChar.push('number');
        	}
        	else 
        	{
        		var symbolsLeftChance = (symbolsInsideEnable) ? (symbolsRightEnable) ? 0.333 : 0.5 : 1;
       		 	if (symbolsLeftEnable && symbolsCount > 0 && ((!symbolsInsideEnable && !symbolsRightEnable) || (Math.random() < symbolsLeftChance))) 
				{
					arrayVariantsNextChar.push('symbol');
        		}
        		else
        		{
        			if(lettersNormalCount > 0)
        			{
        				if(previousLettersType == 'consonant')
        				{
        					arrayVariantsNextChar.push('vowelsNormalLetter');
        				}
        				else
        				{
        					arrayVariantsNextChar.push('consonantNormalLetter');
        				}
        			}
        			if(lettersUpperCount > 0)
        			{
        				if(previousLettersType == 'consonant')
        				{
        					arrayVariantsNextChar.push('vowelsUpperLetter');
        				}
        				else
        				{
        					arrayVariantsNextChar.push('consonantUpperLetter');
        				}
        			}
        		}
        	}
    	}

        var typeNextChar = _getRandomOfVariants(arrayVariantsNextChar);
        var nextChar = '';

        switch (typeNextChar) 
        {
            case 'consonantNormalLetter':
            {
                nextChar = strConsonantLettersNormalArray[_getRandom(0, strConsonantLettersNormalArray.length - 1)];
                lettersNormalCount--;
                passwordContainsLetter = true;
                previousLettersType = 'consonant';
                break;
            }
            case 'consonantUpperLetter':
            {
                nextChar = strConsonantLettersUpperArray[_getRandom(0, strConsonantLettersUpperArray.length - 1)];
                lettersUpperCount--;
                passwordContainsLetter = true;
                previousLettersType = 'consonant';
                break;
            }
            case 'vowelsNormalLetter':
            {
                nextChar = strVowelsLettersNormalArray[_getRandom(0, strVowelsLettersNormalArray.length - 1)];
                lettersNormalCount--;
				passwordContainsLetter = true;
				previousLettersType = 'vowels';
                break;
            }
            case 'vowelsUpperLetter':
            {
                nextChar = strVowelsLettersUpperArray[_getRandom(0, strVowelsLettersUpperArray.length - 1)];
                lettersUpperCount--;
                passwordContainsLetter = true;
                previousLettersType = 'vowels';
                break;
            }
            case 'number':
            {
                nextChar = strNumbersArray[_getRandom(0, strNumbersArray.length - 1)];
                numbersCount--;
                break;
            }
            case 'symbol':
            {
                nextChar = strSymbolsArray[_getRandom(0, strSymbolsArray.length - 1)];
                symbolsCount--;
                break;
            }
        }
        password += nextChar;
    }
    return password;
}

module.exports.password = getPassword;
