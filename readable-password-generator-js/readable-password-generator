"use strict";

var strConsonantLettersNormal = 'qwrtpsdfghjklzxcvbnm'; //Алфавит строчных согласных букв
var strConsonantLettersUpper = strConsonantLettersNormal.toUpperCase(); //Алфавит прописных согласных букв
var strVowelsLettersNormal = 'eyuioa'; //Алфавит строчных гласных букв
var strVowelsLettersUpper = strVowelsLettersNormal.toUpperCase(); //Алфавит прописных гласных букв
var strNumbers = '0123456789'; //Алфавит цифр
var strSymbols = '!@#$%^&*()_+-={}[]:;|?<>/"\'~'; //Алфавит других символов

var strConsonantLettersNormalArray = strConsonantLettersNormal.split(''); //Массив элементов алфавита строчных согласных букв
var strConsonantLettersUpperArray = strConsonantLettersUpper.split(''); //Массив элементов алфавита прописных согласных букв
var strVowelsLettersNormalArray = strVowelsLettersNormal.split(''); //Массив элементов алфавита строчных гласных букв
var strVowelsLettersUpperArray = strVowelsLettersUpper.split(''); //Массив элементов алфавита прописных гласных букв
var strNumbersArray = strNumbers.split(''); //Массив элементов алфавита цифр
var strSymbolsArray = strSymbols.split(''); //Массив элементов алфавита других символов

/*
 * Возвращает случайное число в диапазоне min-max (служебный метод)
 * @private
 * @param {Number} min Минимальное значение
 * @param {Number} max Максимальное значение
 * @returns {Number} Случайное число
 */
function _getRandom(min, max) 
{
  var range = max - min + 1;
  return Math.floor(Math.random() * range) + min;
}

/*
 * Возвращает случайный элемент из массива arrayVariants (служебный метод)
 * @private
 * @param {Array} arrayVariants Массив элементов из которых будет выбран случайный
 * @returns {*} Значение выбранного элемента из массива arrayVariants
*/
function _getRandomOfVariants(arrayVariants) 
{
  arrayVariants = arrayVariants ? arrayVariants : [];
  return arrayVariants.length > 0 ? arrayVariants[_getRandom(0, arrayVariants.length - 1)] : null;
}


/*
 * Генерирует и возвращает пароль
 * @param {Number} lNC Количество строчных букв
 * @param {Number} lUC Количество прописных букв
 * @param {Number} nC Количество цифр
 * @param {Number} sC Количество символов
 * @param {Boolean} nLE Возможность нахождения цифр слева от всех букв
 * @param {Boolean} nIE Возможность нахождения цифр между букв
 * @param {Boolean} nRE Возможность нахождения цифр справа от всех букв
 * @param {Boolean} sLE Возможность нахождения символов слева от всех букв
 * @param {Boolean} sIE Возможность нахождения символов между букв
 * @param {Boolean} sRE Возможность нахождения символов справа от всех букв
 * @returns {String} Сгенерированный пароль
 */ 
function getPassword(lNC, lUC, nC, sC,
  nLE, nIE, nRE, sLE, sIE, sRE) 
{
  var lettersNormalCount = (lNC == undefined) ? 5 : (lNC.type == 'Number') ? (lNC >= 0) ? lNC : 0 : 5;
  var lettersUpperCount = (lUC == undefined) ? 5 : (lUC.type == 'Number') ? (lUC >= 0) ? lUC : 0 : 5;
  var numbersCount = (nC == undefined) ? 5 : (nC.type == 'Number') ? (nC >= 0) ? nC : 0 : 5;
  var symbolsCount = (sC == undefined) ? 5 : (sC.type == 'Number') ? (sC >= 0) ? sC : 0 : 5;
  var numbersLeftEnable = (nLE == undefined) ? false : (nLE.type == 'Boolean') ? nLE : false;
  var numbersInsideEnable = (nIE == undefined) ? false : (nIE.type == 'Boolean') ? nIE : false;
  var numbersRightEnable = (nRE == undefined) ? true : (nRE.type == 'Boolean') ? nRE : true;
  var symbolsLeftEnable = (sLE == undefined) ? false : (sLE.type == 'Boolean') ? sLE : false;
  var symbolsInsideEnable = (sIE == undefined) ? false : (sIE.type == 'Boolean') ? sIE : false;
  var symbolsRightEnable = (sRE == undefined) ? true : (sRE.type == 'Boolean') ? sRE : true;
  var lettersCount = lettersNormalCount + lettersUpperCount; //Число букв в пароле
  //Если количество букв меньше 2, то символы и цифры не могут находиться внутри букв
  if(lettersCount < 2)
  {
    numbersInsideEnable = false;
    symbolsInsideEnable = false;
    if(numbersRightEnable == false)
    {
      numbersLeftEnable = true;
    }
    if(symbolsRightEnable == false)
    {
      symbolsLeftEnable = true;
    }
  }

  var totalLength = lettersCount + numbersCount + symbolsCount; //Итоговое число символов в пароле
  var password = ''; //Строка пароля
  var passwordContainsLetter = false; //Содержит ли пароль буквы (это необходимо для определения когда символы или цифры будут между буквами (словами))
  var previousLettersType = (Math.random() > 0.499) ? 'consonant' : 'vowels'; //Предыдущий тип буквы (гласная или согласная, необходим для определения следующего типа буквы, который будет противополжным (это делает пароль читаемым))

  //Определяем каждый символ пароля
  for (var i = 0; i < totalLength; i++) 
  {
    var arrayVariantsNextChar = []; //Массив возможных вариантов типа следующего символа
    lettersCount = lettersNormalCount + lettersUpperCount; //Количество оставшихся букв
    //Если пароль содержит буквы, то символы и цифры уже не могут находиться слева от них
    if(passwordContainsLetter)
    {
      //Если осталась одна буква
      if(lettersCount == 1)
      {
        var numbersInsideChance = (numbersRightEnable) ? 0.5 : 1; //Вероятность того, что следующий символ цифры окажется внутри букв
        //Если следующий вариант типа символа - цифра, который может находиться только внутри букв, делаем его единственно возможным
        if (numbersInsideEnable && numbersCount > 0 && Math.random() < numbersInsideChance)
        {
          arrayVariantsNextChar.push('number');
        }
        //Если следующий вариант типа символа цифра может находиться не только внутри букв, или цифр больше не осталось
        else 
        {
          var symbolsInsideChance = (symbolsRightEnable) ? 0.5 : 1; //Вероятность того, что следующий символ окажется внутри букв
          //Если следующий вариант типа символа - обычный символ, который может находиться только внутри букв, делаем его единственно возможным
          if (symbolsInsideEnable && symbolsCount > 0 && Math.random() < symbolsInsideChance)
          {
            arrayVariantsNextChar.push('symbol');
          }
          //Если следующий вариант типа символа обычный символ может находиться не только внутри букв или обычных символов больше не осталось, то добавляем в возможные варианты следующего типа символа пароля букву типа, определяемого предыдущим типом буквы
          else
          {
            if(lettersNormalCount > 0)
            {
              if(previousLettersType == 'consonant')
              {
                arrayVariantsNextChar.push('vowelsNormalLetter');
              }
              else
              {
                arrayVariantsNextChar.push('consonantNormalLetter');
              }
            }
            if(lettersUpperCount > 0)
            {
              if(previousLettersType == 'consonant')
              {
                arrayVariantsNextChar.push('vowelsUpperLetter');
              }
              else
              {
                arrayVariantsNextChar.push('consonantUpperLetter');
              }
            }
          }
        }
      }
      //Если количество оставшихся букв не равно 1
      else
      {
        //Если количество букв больше 1, то добавляем все возможные варианты типов символов, которые остались
        if(lettersCount > 1)
        {
          if(numbersInsideEnable && numbersCount > 0)
          {
            arrayVariantsNextChar.push('number');
          }
          if(symbolsInsideEnable && symbolsCount > 0)
          {
            arrayVariantsNextChar.push('symbol');
          }
          if(lettersNormalCount > 0)
          {
            if(previousLettersType == 'consonant')
            {
              arrayVariantsNextChar.push('vowelsNormalLetter');
            }
            else
            {
              arrayVariantsNextChar.push('consonantNormalLetter');
            }
          }
          if(lettersUpperCount > 0)
          {
            if(previousLettersType == 'consonant')
            {
              arrayVariantsNextChar.push('vowelsUpperLetter');
            }
            else
            {
              arrayVariantsNextChar.push('consonantUpperLetter');
            }
          }
        }
        //Если букв не осталось, а остались цифры или буквы, то добавляем их в возможные варианты типа следующего символа
        else
        {
          if(numbersCount > 0)
          {
            arrayVariantsNextChar.push('number');
          }
          if(symbolsCount > 0)
          {
            arrayVariantsNextChar.push('symbol');
          }
        }
      }
    }
    //Если пароль не содержит буквы, то символы и цифры могут находиться слева от них
    else
    {
      var numbersLeftChance = (numbersInsideEnable) ? (numbersRightEnable) ? 0.333 : 0.5 : 1; //Вероятность того, что следующий символ цифры окажется слева от букв
      //Если следующий вариант типа символа - цифра, который может находиться только слева от букв, делаем его единственно возможным
      if (numbersLeftEnable && numbersCount > 0 && Math.random() <= numbersLeftChance)
      {
        arrayVariantsNextChar.push('number');
      }
      //Если следующий вариант типа символа цифра может находиться не только слева от букв или цифр больше не осталось
      else 
      {
        var symbolsLeftChance = (symbolsInsideEnable) ? (symbolsRightEnable) ? 0.333 : 0.5 : 1; //Вероятность того, что следующий символ окажется слева от букв
        //Если следующий вариант типа символа - обычный символ, который может находиться только слева от букв, делаем его единственно возможным
        if (symbolsLeftEnable && symbolsCount > 0 && Math.random() <= symbolsLeftChance) 
        {
          arrayVariantsNextChar.push('symbol');
        }
        //Если следующий вариант типа символа обычный символ может находиться не только слева от букв или обычных символов больше не осталось, то добавляем в возможные варианты следующего типа символа пароля букву типа, определяемого предыдущим типом буквы
        else
        {
          if(lettersNormalCount > 0)
          {
            if(previousLettersType == 'consonant')
            {
              arrayVariantsNextChar.push('vowelsNormalLetter');
            }
            else
            {
              arrayVariantsNextChar.push('consonantNormalLetter');
            }
          }
          if(lettersUpperCount > 0)
          {
            if(previousLettersType == 'consonant')
            {
              arrayVariantsNextChar.push('vowelsUpperLetter');
            }
            else
            {
              arrayVariantsNextChar.push('consonantUpperLetter');
            }
          }
        }
      }
    }

    //Получаем случайный тип следующего символа пароля
    var typeNextChar = _getRandomOfVariants(arrayVariantsNextChar);
    var nextChar = ''; //Следующий символ пароля

    //На основании типа следующего символа пароля получаем случайно сам следующий символ из списка символов этого типа
    switch (typeNextChar) 
    {
      case 'consonantNormalLetter':
      {
        nextChar = strConsonantLettersNormalArray[_getRandom(0, strConsonantLettersNormalArray.length - 1)];
        lettersNormalCount--;
        passwordContainsLetter = true;
        previousLettersType = 'consonant';
        break;
      }
      case 'consonantUpperLetter':
      {
        nextChar = strConsonantLettersUpperArray[_getRandom(0, strConsonantLettersUpperArray.length - 1)];
        lettersUpperCount--;
        passwordContainsLetter = true;
        previousLettersType = 'consonant';
        break;
      }
      case 'vowelsNormalLetter':
      {
        nextChar = strVowelsLettersNormalArray[_getRandom(0, strVowelsLettersNormalArray.length - 1)];
        lettersNormalCount--;
        passwordContainsLetter = true;
        previousLettersType = 'vowels';
        break;
      }
      case 'vowelsUpperLetter':
      {
        nextChar = strVowelsLettersUpperArray[_getRandom(0, strVowelsLettersUpperArray.length - 1)];
        lettersUpperCount--;
        passwordContainsLetter = true;
        previousLettersType = 'vowels';
        break;
      }
      case 'number':
      {
        nextChar = strNumbersArray[_getRandom(0, strNumbersArray.length - 1)];
        numbersCount--;
        break;
      }
      case 'symbol':
      {
        nextChar = strSymbolsArray[_getRandom(0, strSymbolsArray.length - 1)];
        symbolsCount--;
        break;
      }
    }
    password += nextChar;
  }
  return password;
}

module.exports.password = getPassword;
